// 以下为 windows 的 c/c++ 配置文件
// {
//     "version": "0.2.0",
//     "configurations":[
//         {
//             "name": "C/C++",
//             "type": "cppdbg",
//             "request": "launch",
//             "program": "${fileDirname}/${fileBasenameNoExtension}.exe",
//             "args": [],
//             "stopAtEntry": false,
//             "cwd": "${workspaceFolder}",
//             "environment": [],
//             "externalConsole": false,//false显示终端，true显示控制台
//             "MIMode": "gdb",
//             "miDebuggerPath": "D:\\MinGW-w64\\mingw64\\bin\\gdb.exe",//这里改成你的gdb.exe路径地址
//             "preLaunchTask": "g++",
//             "setupCommands": [
//                 {
//                     "description": "Enable pretty-printing for gdb",
//                     "text": "-enable-pretty-printing",
//                     "ignoreFailures": true
//                 }
//             ],
//         },
//     ]
// }

// 以下为 ubuntu 下的 c/c++ 配置文件
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++", // 配置名称
            "type": "cppdbg",// 配置类型
            "request": "launch",// 请求配置类型
            "program": "${fileDirname}/${fileBasenameNoExtension}.out",// 讲好进行调试的程序
            "args": [],// 程序调试时传递给程序的命令行参数，这里设置为空
            "stopAtEntry": false,// 设为true时程序将暂停在程序入口处，相当于在main上打断点
            "cwd": "${workspaceFolder}",
            "environment": [],// 环境变量，这里设为空即可
            "externalConsole": false,// 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端
            "MIMode": "gdb",// 指定连接的调试器，gdb是minGW中的调试程序
            "miDebuggerPath": "/usr/bin/gdb", // 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径
            "preLaunchTask": "build",// 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
    ]
}